// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using saboteur.Data;

namespace saboteur.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190223042335_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("saboteur.Models.Game.DocumentType", b =>
                {
                    b.Property<int>("DocumentTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Type")
                        .HasMaxLength(60);

                    b.HasKey("DocumentTypeId");

                    b.ToTable("DocumentType");

                    b.HasData(
                        new { DocumentTypeId = 1, Type = "Season" }
                    );
                });

            modelBuilder.Entity("saboteur.Models.Game.Episode", b =>
                {
                    b.Property<int>("EpisodeId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AirDate");

                    b.Property<string>("Description")
                        .HasMaxLength(2000);

                    b.Property<int>("EpisodeNum");

                    b.Property<string>("FullEpisodePublicUrl")
                        .HasMaxLength(200);

                    b.Property<string>("PostQuizPublicUrl")
                        .HasMaxLength(200);

                    b.Property<string>("PreQuizPublicUrl")
                        .HasMaxLength(200);

                    b.Property<int>("SeasonId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.HasKey("EpisodeId");

                    b.HasIndex("SeasonId");

                    b.ToTable("Episodes");

                    b.HasData(
                        new { EpisodeId = 1, AirDate = new DateTime(2001, 1, 9, 0, 0, 0, 0, DateTimeKind.Unspecified), EpisodeNum = 1, FullEpisodePublicUrl = "https://www.youtube.com/watch?v=F3tgJwpCFWo", PostQuizPublicUrl = "https://www.youtube.com/embed/F3tgJwpCFWo?start=2167&end=2596&version=3", PreQuizPublicUrl = "https://www.youtube.com/embed/F3tgJwpCFWo?start=1&end=2168&version=3", SeasonId = 1, Title = "Episode 1" }
                    );
                });

            modelBuilder.Entity("saboteur.Models.Game.EpisodePlayer", b =>
                {
                    b.Property<int>("EpisodeId");

                    b.Property<int>("PlayerId");

                    b.Property<int?>("PlayerStatusId1");

                    b.HasKey("EpisodeId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("PlayerStatusId1");

                    b.ToTable("EpisodePlayers");
                });

            modelBuilder.Entity("saboteur.Models.Game.Host", b =>
                {
                    b.Property<int>("HostId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("HostId");

                    b.ToTable("Hosts");

                    b.HasData(
                        new { HostId = 1, Name = "Anderson Cooper" }
                    );
                });

            modelBuilder.Entity("saboteur.Models.Game.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City")
                        .HasMaxLength(40);

                    b.Property<string>("Country")
                        .HasMaxLength(40);

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<bool>("PlayerLocation");

                    b.Property<string>("State")
                        .HasMaxLength(40);

                    b.Property<string>("StateAbbrev")
                        .HasMaxLength(40);

                    b.HasKey("LocationId");

                    b.ToTable("Locations");

                    b.HasData(
                        new { LocationId = 1, City = "Newton", Country = "USA", PlayerLocation = false, State = "New Jersey", StateAbbrev = "NJ" },
                        new { LocationId = 2, City = "Colorado Springs", Country = "USA", PlayerLocation = false, State = "Colorado", StateAbbrev = "CO" },
                        new { LocationId = 3, City = "Denver", Country = "USA", PlayerLocation = false, State = "Colorado", StateAbbrev = "CO" },
                        new { LocationId = 4, City = "New York", Country = "USA", PlayerLocation = false, State = "New York", StateAbbrev = "NY" },
                        new { LocationId = 5, City = "Cedar Rapids", Country = "USA", PlayerLocation = false, State = "Iowa", StateAbbrev = "IA" },
                        new { LocationId = 6, City = "Oxnard", Country = "USA", PlayerLocation = false, State = "California", StateAbbrev = "CA" },
                        new { LocationId = 7, City = "Cincinnatti", Country = "USA", PlayerLocation = false, State = "Ohio", StateAbbrev = "OH" },
                        new { LocationId = 8, City = "Chicago", Country = "USA", PlayerLocation = false, State = "Illinois", StateAbbrev = "IL" },
                        new { LocationId = 9, City = "San Jose", Country = "USA", PlayerLocation = false, State = "California", StateAbbrev = "CA" },
                        new { LocationId = 10, City = "Miami", Country = "USA", PlayerLocation = false, State = "Florida", StateAbbrev = "FL" }
                    );
                });

            modelBuilder.Entity("saboteur.Models.Game.Mission", b =>
                {
                    b.Property<int>("MissionId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AmountWon");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<int>("EpisodeId");

                    b.Property<int>("LocationId");

                    b.Property<string>("MissionPublicUrl")
                        .HasMaxLength(200);

                    b.Property<int>("PossibleEarnings");

                    b.Property<string>("Title")
                        .HasMaxLength(60);

                    b.HasKey("MissionId");

                    b.HasIndex("EpisodeId");

                    b.HasIndex("LocationId");

                    b.ToTable("Missions");
                });

            modelBuilder.Entity("saboteur.Models.Game.MissionPlayer", b =>
                {
                    b.Property<int>("MissionId");

                    b.Property<int>("PlayerId");

                    b.Property<int>("MissionRoleId");

                    b.Property<int>("MissionSortId");

                    b.HasKey("MissionId", "PlayerId");

                    b.HasIndex("MissionRoleId");

                    b.HasIndex("MissionSortId");

                    b.HasIndex("PlayerId");

                    b.ToTable("MissionPlayers");
                });

            modelBuilder.Entity("saboteur.Models.Game.MissionRole", b =>
                {
                    b.Property<int>("MissionRoleId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("MissionRoleId");

                    b.ToTable("MissionRoles");
                });

            modelBuilder.Entity("saboteur.Models.Game.MissionSort", b =>
                {
                    b.Property<int>("MissionSortId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Sort")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("MissionSortId");

                    b.ToTable("MissionSorts");
                });

            modelBuilder.Entity("saboteur.Models.Game.Penalty", b =>
                {
                    b.Property<int>("PenaltyId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Amount");

                    b.Property<int>("EpisodeId");

                    b.Property<int>("MissionId");

                    b.HasKey("PenaltyId");

                    b.HasIndex("EpisodeId");

                    b.HasIndex("MissionId");

                    b.ToTable("Penalties");
                });

            modelBuilder.Entity("saboteur.Models.Game.Player", b =>
                {
                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Age");

                    b.Property<int?>("FinalPlayerEpisodeEpisodeId");

                    b.Property<int>("FinalPlayerEpisodeId");

                    b.Property<int?>("FinalPlayerEpisodePlayerId");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("LastName")
                        .HasMaxLength(20);

                    b.Property<int>("LocationId");

                    b.Property<string>("Occupation")
                        .HasMaxLength(40);

                    b.Property<string>("PicutreUrl");

                    b.Property<int>("TotalEarnings");

                    b.HasKey("PlayerId");

                    b.HasIndex("LocationId");

                    b.HasIndex("FinalPlayerEpisodeEpisodeId", "FinalPlayerEpisodePlayerId");

                    b.ToTable("Players");

                    b.HasData(
                        new { PlayerId = 1, Age = 29, FinalPlayerEpisodeId = 10, FirstName = "Jim", LocationId = 1, Occupation = "Helicopter Pilot", TotalEarnings = 0 },
                        new { PlayerId = 2, Age = 23, FinalPlayerEpisodeId = 1, FirstName = "Afi", LocationId = 2, Occupation = "Med School Applicant", TotalEarnings = 0 },
                        new { PlayerId = 3, Age = 30, FinalPlayerEpisodeId = 10, FirstName = "Steven", LocationId = 3, Occupation = "Undercover Cop", TotalEarnings = 0 },
                        new { PlayerId = 4, Age = 63, FinalPlayerEpisodeId = 9, FirstName = "Charlie", LocationId = 4, Occupation = "Retired Police Detective", TotalEarnings = 0 },
                        new { PlayerId = 5, Age = 29, FinalPlayerEpisodeId = 1, FirstName = "Wendi", LocationId = 5, Occupation = "Visual Display Artist", TotalEarnings = 0 },
                        new { PlayerId = 6, Age = 42, FinalPlayerEpisodeId = 1, FirstName = "Manuel", LocationId = 6, Occupation = "Event Coordinator", TotalEarnings = 0 },
                        new { PlayerId = 7, Age = 55, FinalPlayerEpisodeId = 1, FirstName = "Kate", LocationId = 7, Occupation = "Real Estate Investor", TotalEarnings = 0 },
                        new { PlayerId = 8, Age = 28, FinalPlayerEpisodeId = 10, FirstName = "Kathryn", LocationId = 8, Occupation = "Law School Lecturer", TotalEarnings = 0 },
                        new { PlayerId = 9, Age = 35, FinalPlayerEpisodeId = 1, FirstName = "Jennifer", LocationId = 9, Occupation = "Field Communication Manager", TotalEarnings = 0 },
                        new { PlayerId = 10, Age = 23, FinalPlayerEpisodeId = 1, FirstName = "Henry", LocationId = 10, Occupation = "Bartender", TotalEarnings = 0 }
                    );
                });

            modelBuilder.Entity("saboteur.Models.Game.PlayerPenalty", b =>
                {
                    b.Property<int>("PlayerId");

                    b.Property<int>("PenaltyId");

                    b.HasKey("PlayerId", "PenaltyId");

                    b.HasIndex("PenaltyId");

                    b.ToTable("PlayerPenalty");
                });

            modelBuilder.Entity("saboteur.Models.Game.PlayerStatus", b =>
                {
                    b.Property<int>("PlayerStatusId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("status")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("PlayerStatusId");

                    b.ToTable("PlayerStatuses");

                    b.HasData(
                        new { PlayerStatusId = 1, status = "Executed" },
                        new { PlayerStatusId = 2, status = "Bribed" },
                        new { PlayerStatusId = 3, status = "Winner" },
                        new { PlayerStatusId = 4, status = "The Mole" }
                    );
                });

            modelBuilder.Entity("saboteur.Models.Game.Quiz", b =>
                {
                    b.Property<int>("QuizId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("EpisodeId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.HasKey("QuizId");

                    b.HasIndex("EpisodeId")
                        .IsUnique();

                    b.ToTable("Quizzes");

                    b.HasData(
                        new { QuizId = 1, EpisodeId = 1, Title = "Execution 1 Quiz" }
                    );
                });

            modelBuilder.Entity("saboteur.Models.Game.QuizQuestion", b =>
                {
                    b.Property<int>("QuizQuestionId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("EpisodeId");

                    b.Property<int>("Order");

                    b.Property<string>("Question")
                        .HasMaxLength(200);

                    b.Property<int>("QuizId");

                    b.HasKey("QuizQuestionId");

                    b.HasIndex("EpisodeId");

                    b.HasIndex("QuizId");

                    b.ToTable("QuizQuestions");

                    b.HasData(
                        new { QuizQuestionId = 1, EpisodeId = 1, Order = 1, Question = "Is the Mole Male or Female?", QuizId = 1 }
                    );
                });

            modelBuilder.Entity("saboteur.Models.Game.QuizQuestionChoice", b =>
                {
                    b.Property<int>("QuizQuestionChoiceId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Choice")
                        .HasMaxLength(200);

                    b.Property<bool>("Correct");

                    b.Property<int>("QuizQuestionId");

                    b.HasKey("QuizQuestionChoiceId");

                    b.HasIndex("QuizQuestionId");

                    b.ToTable("QuizQuestionChoices");

                    b.HasData(
                        new { QuizQuestionChoiceId = 1, Choice = "Male", Correct = false, QuizQuestionId = 1 },
                        new { QuizQuestionChoiceId = 2, Choice = "Female", Correct = true, QuizQuestionId = 1 }
                    );
                });

            modelBuilder.Entity("saboteur.Models.Game.Reference", b =>
                {
                    b.Property<int>("ReferenceId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateRetrieved");

                    b.Property<int>("DocumentId");

                    b.Property<int>("DocumentTypeId");

                    b.Property<int?>("EpisodeId");

                    b.Property<int?>("MissionId");

                    b.Property<int?>("PlayerId");

                    b.Property<int?>("SeasonId");

                    b.Property<string>("Title")
                        .HasMaxLength(60);

                    b.Property<string>("Url")
                        .HasMaxLength(200);

                    b.HasKey("ReferenceId");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("EpisodeId");

                    b.HasIndex("MissionId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("SeasonId");

                    b.ToTable("References");

                    b.HasData(
                        new { ReferenceId = 1, DateRetrieved = new DateTime(2019, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified), DocumentId = 1, DocumentTypeId = 1, Url = "https://en.wikipedia.org/wiki/The_Mole_(U.S._season_1)" }
                    );
                });

            modelBuilder.Entity("saboteur.Models.Game.Season", b =>
                {
                    b.Property<int>("SeasonId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Country")
                        .HasMaxLength(20);

                    b.Property<int>("CountrySeasonNum");

                    b.Property<int>("EarnedPot");

                    b.Property<DateTime?>("EndDate");

                    b.Property<int>("HostId");

                    b.Property<int>("MaxPot");

                    b.Property<string>("PublicUrl")
                        .HasMaxLength(200);

                    b.Property<string>("PurchaseUrl")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("StartDate");

                    b.Property<string>("Station")
                        .HasMaxLength(20);

                    b.Property<string>("Title")
                        .HasMaxLength(60);

                    b.HasKey("SeasonId");

                    b.HasIndex("HostId");

                    b.ToTable("Seasons");

                    b.HasData(
                        new { SeasonId = 1, Country = "USA", CountrySeasonNum = 1, EarnedPot = 510000, EndDate = new DateTime(2001, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified), HostId = 1, MaxPot = 1000000, PublicUrl = "https://www.youtube.com/watch?v=F3tgJwpCFWo&list=PL09numCPHqBQLU0q7VY1PsOBmrF860gt3", PurchaseUrl = "https://www.amazon.com/Mole-Complete-First-Season/dp/B0007GAEXK", StartDate = new DateTime(2001, 1, 9, 0, 0, 0, 0, DateTimeKind.Unspecified), Station = "ABC", Title = "The Mole" }
                    );
                });

            modelBuilder.Entity("saboteur.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<int>("Age");

                    b.Property<string>("BillingId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("First")
                        .HasMaxLength(20);

                    b.Property<string>("Last")
                        .HasMaxLength(20);

                    b.Property<DateTime>("LastLogin");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<int>("LoginCount");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("Occupation")
                        .HasMaxLength(60);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("SubscriptionId");

                    b.Property<string>("Timezone")
                        .HasMaxLength(40);

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("saboteur.Models.Users.UserQuiz", b =>
                {
                    b.Property<Guid>("UserQuizId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("EndDateTime");

                    b.Property<int>("EpisodeId");

                    b.Property<int>("QuestionsCorrect");

                    b.Property<DateTime>("StartDateTime");

                    b.Property<int>("TotalQuestions");

                    b.Property<int>("TotalSeconds");

                    b.Property<string>("UserId");

                    b.HasKey("UserQuizId");

                    b.HasIndex("EpisodeId");

                    b.HasIndex("UserId");

                    b.ToTable("UserQuizzes");
                });

            modelBuilder.Entity("saboteur.Models.Users.UserQuizAnswer", b =>
                {
                    b.Property<Guid>("UserQuizAnswerId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("EndDateTime");

                    b.Property<bool>("QuizAnswerCorrect");

                    b.Property<Guid>("QuizQuestionChoiceId");

                    b.Property<int?>("QuizQuestionChoiceId1");

                    b.Property<Guid>("QuizQuestionId");

                    b.Property<int?>("QuizQuestionId1");

                    b.Property<DateTime>("StartDateTime");

                    b.Property<int>("TotalSeconds");

                    b.Property<string>("UserQuizId");

                    b.Property<Guid?>("UserQuizId1");

                    b.HasKey("UserQuizAnswerId");

                    b.HasIndex("QuizQuestionChoiceId1");

                    b.HasIndex("QuizQuestionId1");

                    b.HasIndex("UserQuizId1");

                    b.ToTable("UserQuizAnswers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("saboteur.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("saboteur.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("saboteur.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("saboteur.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("saboteur.Models.Game.Episode", b =>
                {
                    b.HasOne("saboteur.Models.Game.Season", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("saboteur.Models.Game.EpisodePlayer", b =>
                {
                    b.HasOne("saboteur.Models.Game.Episode", "Episode")
                        .WithMany("EpisodePlayers")
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("saboteur.Models.Game.Player", "Player")
                        .WithMany("EpisodePlayers")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("saboteur.Models.Game.PlayerStatus", "PlayerStatus")
                        .WithMany()
                        .HasForeignKey("PlayerStatusId1");
                });

            modelBuilder.Entity("saboteur.Models.Game.Mission", b =>
                {
                    b.HasOne("saboteur.Models.Game.Episode", "Episode")
                        .WithMany("Missions")
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("saboteur.Models.Game.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("saboteur.Models.Game.MissionPlayer", b =>
                {
                    b.HasOne("saboteur.Models.Game.Mission", "Mission")
                        .WithMany("MissionPlayers")
                        .HasForeignKey("MissionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("saboteur.Models.Game.MissionRole", "MissionRole")
                        .WithMany()
                        .HasForeignKey("MissionRoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("saboteur.Models.Game.MissionSort", "MissionSort")
                        .WithMany()
                        .HasForeignKey("MissionSortId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("saboteur.Models.Game.Player", "Player")
                        .WithMany("MissionPlayers")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("saboteur.Models.Game.Penalty", b =>
                {
                    b.HasOne("saboteur.Models.Game.Episode", "Episode")
                        .WithMany()
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("saboteur.Models.Game.Mission", "Mission")
                        .WithMany()
                        .HasForeignKey("MissionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("saboteur.Models.Game.Player", b =>
                {
                    b.HasOne("saboteur.Models.Game.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("saboteur.Models.Game.EpisodePlayer", "FinalPlayerEpisode")
                        .WithMany()
                        .HasForeignKey("FinalPlayerEpisodeEpisodeId", "FinalPlayerEpisodePlayerId");
                });

            modelBuilder.Entity("saboteur.Models.Game.PlayerPenalty", b =>
                {
                    b.HasOne("saboteur.Models.Game.Penalty", "Penalty")
                        .WithMany("PlayerPenalties")
                        .HasForeignKey("PenaltyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("saboteur.Models.Game.Player", "Player")
                        .WithMany("PlayerPenalties")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("saboteur.Models.Game.Quiz", b =>
                {
                    b.HasOne("saboteur.Models.Game.Episode", "Episode")
                        .WithOne("Quiz")
                        .HasForeignKey("saboteur.Models.Game.Quiz", "EpisodeId");
                });

            modelBuilder.Entity("saboteur.Models.Game.QuizQuestion", b =>
                {
                    b.HasOne("saboteur.Models.Game.Episode", "Episode")
                        .WithMany()
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("saboteur.Models.Game.Quiz", "Quiz")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("saboteur.Models.Game.QuizQuestionChoice", b =>
                {
                    b.HasOne("saboteur.Models.Game.QuizQuestion", "QuizQuestion")
                        .WithMany("QuizQuestionChoices")
                        .HasForeignKey("QuizQuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("saboteur.Models.Game.Reference", b =>
                {
                    b.HasOne("saboteur.Models.Game.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("saboteur.Models.Game.Episode", "Episode")
                        .WithMany("References")
                        .HasForeignKey("EpisodeId");

                    b.HasOne("saboteur.Models.Game.Mission")
                        .WithMany("References")
                        .HasForeignKey("MissionId");

                    b.HasOne("saboteur.Models.Game.Player", "Player")
                        .WithMany("References")
                        .HasForeignKey("PlayerId");

                    b.HasOne("saboteur.Models.Game.Season")
                        .WithMany("References")
                        .HasForeignKey("SeasonId");
                });

            modelBuilder.Entity("saboteur.Models.Game.Season", b =>
                {
                    b.HasOne("saboteur.Models.Game.Host", "Host")
                        .WithMany("Seasons")
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("saboteur.Models.Users.UserQuiz", b =>
                {
                    b.HasOne("saboteur.Models.Game.Episode", "Episode")
                        .WithMany()
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("saboteur.Models.User", "User")
                        .WithMany("UserQuizzes")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("saboteur.Models.Users.UserQuizAnswer", b =>
                {
                    b.HasOne("saboteur.Models.Game.QuizQuestionChoice", "QuizQuestionChoice")
                        .WithMany()
                        .HasForeignKey("QuizQuestionChoiceId1");

                    b.HasOne("saboteur.Models.Game.QuizQuestion", "QuizQuestion")
                        .WithMany()
                        .HasForeignKey("QuizQuestionId1");

                    b.HasOne("saboteur.Models.Users.UserQuiz", "UserQuiz")
                        .WithMany("UserQuizAnswers")
                        .HasForeignKey("UserQuizId1");
                });
#pragma warning restore 612, 618
        }
    }
}
